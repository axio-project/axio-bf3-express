#
# Copyright (c) 2024 NVIDIA CORPORATION AND AFFILIATES.  All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted
# provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright notice, this list of
#       conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright notice, this list of
#       conditions and the following disclaimer in the documentation and/or other materials
#       provided with the distribution.
#     * Neither the name of the NVIDIA CORPORATION nor the names of its contributors may be used
#       to endorse or promote products derived from this software without specific prior written
#       permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TOR (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#


storage_common_src = [
    'storage_common/buffer_utils.cpp',
    'storage_common/doca_utils.cpp',
    'storage_common/ip_address.cpp',
    'storage_common/posix_utils.cpp',
    'storage_common/tcp_socket.cpp',
]

zero_copy_common_src = storage_common_src + [
    'zero_copy/control_message.cpp',
    'zero_copy/io_message.cpp',
]

if is_host
    executable(DOCA_PREFIX + APP_NAME + '_zero_copy_initiator_comch',
               [
                   'zero_copy/initiator_comch_application.cpp',
                   'zero_copy/initiator_comch_main.cpp',
               ] + zero_copy_common_src,
               override_options : ['cpp_std=c++17'],
               c_args : base_c_args,
               cpp_args : base_cpp_args,
               dependencies : app_dependencies,
               include_directories : app_inc_dirs + include_directories('.'),
               install : install_apps,
    )
endif

if is_dpu
    executable(DOCA_PREFIX + APP_NAME + '_zero_copy_comch_to_rdma',
               [
                   'zero_copy/comch_to_rdma_application.cpp',
                   'zero_copy/comch_to_rdma_main.cpp',
               ] + zero_copy_common_src,
               override_options : ['cpp_std=c++17'],
               c_args : base_c_args,
               cpp_args : base_cpp_args,
               dependencies : app_dependencies,
               include_directories : app_inc_dirs + include_directories('.'),
               install : install_apps,
    )
endif

executable(DOCA_PREFIX + APP_NAME + '_zero_copy_target_rdma',
           [
               'zero_copy/target_rdma_application.cpp',
               'zero_copy/target_rdma_main.cpp',
           ] + zero_copy_common_src,
           override_options : ['cpp_std=c++17'],
           c_args : base_c_args,
           cpp_args : base_cpp_args,
           dependencies : app_dependencies,
           include_directories : app_inc_dirs + include_directories('.'),
           install : install_apps,
)
