#pragma once

#include <iostream>
#include <map>
#include <set>

#include "common.h"
#include "log.h"

#include "datapath/component_block.h"

namespace nicc {

// forward declaration
class Component;
class AppHandler;
class AppFunction;
class AppContext;

/*!
 *  \brief  dataplane component
 */
class Component {
/**
 * ----------------------Public Methods----------------------
 */ 
 public:
    /*!
     *  \brief  constructor
     *  \param  
     */
    Component() : _cid(kComponent_Unknown) {}
    virtual ~Component(){}
    
    /**
     *  \brief  init the component, called by the resource pool
     *  \param  desp    descriptor to initialize the component,
     *                  generated by the device parser
     *  \return NICC_SUCCESS for successful initialization
     */
    virtual nicc_retval_t init(ComponentBaseDesp_t* desp){
        return NICC_ERROR_NOT_IMPLEMENTED;
    }

    /**
     *  \brief  apply block of resource from the component
     *  \param  desp    descriptor for allocation, generated
     *                  by the app funciton
     *  \param  cb      the handle of the allocated block
     *  \return NICC_SUCCESS for successful allocation
     */
    virtual nicc_retval_t allocate_block(ComponentBaseDesp_t* desp, ComponentBlock* cb){
        return NICC_ERROR_NOT_IMPLEMENTED;
    }

    /**
     *  \brief  return block of resource back to the component
     *  \param  cb          the handle of the block to be deallocated
     *  \return NICC_SUCCESS for successful deallocation
     */
    virtual nicc_retval_t deallocate_block(ComponentBlock* cb){
        return NICC_ERROR_NOT_IMPLEMENTED;
    }

/**
 * ----------------------Protected Parameters----------------------
 * \brief  allow to be accessed by class ComponentBlock_DPA
 */ 
 protected:
    // component id
    component_typeid_t _cid;
/**
 * ----------------------Internel Parameters----------------------
 */ 
 private:
};

} // namespace nicc
